const _i=e=>!(!e||0!==Object.keys(e).length),_t=e=>((e=>Array.isArray(e))(e)?"array":(e=>e instanceof Promise||e&&"function"==typeof e.then)(e)&&"promise")||typeof e,check=(e,t)=>_t(e)===t.name.toLowerCase();const schema = (e,t={})=>{const{empty:r,declared:n}=t;return e?t=>{if(!r&&(_i(t)||!t))return console.error("No item (or empty object) passed to validate"),!0;const o=Object.keys(e),a=((e,t)=>{const r=Object.keys(e);if(r.some((t=>e[t].default))){const n=r.reduce(((r,n)=>(void 0!==t[n]&&(r[n]=t[n]),e[n].default&&(r[n]=e[n].default),r)),{});return{...t,...n}}return t})(e,t),i=((e,t)=>{const r=Object.keys(t).reduce(((r,n)=>(_i(r)&&(r.valid=[],r.invalid=[]),r[n in e?"valid":"invalid"].push({[n]:t[n]}),r)),{});return r.invalid.length&&console.error(`The following options are not valid for the given schema: ${JSON.stringify(r.invalid)} and are excluded.`),r})(e,a),c=((e,t,r)=>r.reduce(((r,n)=>{let o=t[n],a=e[n];if("object"===_t(a)&&(a=a.required?a.value:null),null===a)return r;if(!a)return console.error(`A key (${n}) has not been declared on the item:`,t),r.push(!1),r;const i="array"===_t(a),c=i?a.some((e=>check(o,e))):check(o,a),s=i?a.map((e=>e.name)).join(", "):a.name;return c||console.error(`Given value for ${n} (${typeof o}) is not of a valid type matching the schema: [${s}]`),r.push(c),r}),[]))(e,n?i.valid:t,o);return c.every((e=>!!e))&&i}:()=>!0};